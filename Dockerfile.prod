FROM golang:1.18-alpine AS builder

# 依存関係のためのパッケージをインストール
RUN apk add --no-cache git gcc musl-dev

# 作業ディレクトリを設定
WORKDIR /app

# Go Modulesのキャッシュレイヤーを作成
COPY go.mod go.sum ./
RUN go mod download && go mod verify

# ソースコードをコピー
COPY . .

# バイナリをビルド
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags="-w -s" -o app ./cmd/app/main.go

# 最終イメージを小さくするためのマルチステージビルド
FROM alpine:3.16

# 必要なパッケージをインストール
RUN apk --no-cache add ca-certificates tzdata && \
    update-ca-certificates

# タイムゾーンを設定
ENV TZ=Asia/Tokyo

# ビルドしたバイナリをコピー
COPY --from=builder /app/app /app/app

# 設定ファイルとスクリプトをコピー
COPY docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# アップロードディレクトリを作成
RUN mkdir -p /app/uploads

# 作業ディレクトリを設定
WORKDIR /app

# 環境変数を設定（デフォルト値）
ENV SERVER_PORT=8080 \
    UPLOAD_DIR=/app/uploads \
    GIN_MODE=release

# ポートを公開
EXPOSE 8080

# 非rootユーザーに切り替え
RUN addgroup -S appgroup && adduser -S appuser -G appgroup
RUN chown -R appuser:appgroup /app
USER appuser

# エントリーポイントを設定
ENTRYPOINT ["docker-entrypoint.sh"]

# アプリケーションを実行
CMD ["/app/app"]
