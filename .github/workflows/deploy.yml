name: Build and Deploy to EC2

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.18'
          cache: false  # Goキャッシュを無効化
        
      - name: Install dependencies
        run: |
          go clean -modcache  # モジュールキャッシュをクリア
          go mod download
          go mod tidy
      
      - name: Build application
        run: |
          # 既存のバイナリを削除（あれば）
          rm -f app
          # 強制的に再ビルド
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -ldflags="-w -s" -o app ./cmd/app/main.go
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Debug AWS and EC2 information
        run: |
          echo "AWS Region: ${{ secrets.AWS_REGION }}"
          echo "EC2 Instance ID: ${{ secrets.EC2_INSTANCE_ID }}"
          
          # EC2インスタンスの存在確認
          echo "Checking if EC2 instance exists..."
          aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query "Reservations[0].Instances[0].State.Name" --output text || echo "Instance not found or not accessible"
          
          # SSMマネージドインスタンスの確認
          echo "Checking if instance is managed by SSM..."
          aws ssm describe-instance-information --filters "Key=InstanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" --query "InstanceInformationList[0].PingStatus" --output text || echo "Instance not managed by SSM"
      
      - name: Run Simple Test Command via SSM
        run: |
          echo "Running simple test command to verify SSM access..."
          TEST_CMD=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --parameters 'commands=["echo Hello from SSM"]' \
            --output text)
            
          echo "Test command result: $TEST_CMD"
          sleep 5
      
      - name: Deploy to EC2 via SSM
        run: |
          # 現在の日時を取得（ユニークなデプロイIDとして使用）
          DEPLOY_ID=$(date +%Y%m%d%H%M%S)
          echo "Starting deployment $DEPLOY_ID"
          
          # 永続的なファイル名を使用（タイムスタンプなし）
          echo "Creating main deployment files with consistent names..."
          
          # S3にアプリケーションファイルをアップロード
          echo "Uploading application files to S3..."
          aws s3 cp app s3://${{ secrets.S3_BUCKET_NAME }}/deploy/app
          aws s3 cp docker-compose.yml s3://${{ secrets.S3_BUCKET_NAME }}/deploy/docker-compose.yml
          aws s3 cp Dockerfile s3://${{ secrets.S3_BUCKET_NAME }}/deploy/Dockerfile
          
          # 環境変数ファイルを作成してS3にアップロード
          echo "${{ secrets.ENV_FILE }}" > env_file.txt
          aws s3 cp env_file.txt s3://${{ secrets.S3_BUCKET_NAME }}/deploy/.env
          
          # 単一のシンプルなデプロイスクリプトを作成
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          set -x
          
          # 引数からディレクトリ情報とS3バケットを取得
          APP_DIR=$1
          S3_BUCKET=$2
          
          echo "==== Starting deployment process ===="
          echo "Deploying to directory: $APP_DIR"
          echo "Using S3 bucket: $S3_BUCKET"
          echo "Running as user: $(whoami)"
          echo "Current directory: $(pwd)"
          
          # アプリケーションディレクトリの確認・作成
          echo "Setting up application directory..."
          mkdir -p "$APP_DIR" "$APP_DIR/uploads"
          chmod 755 "$APP_DIR/uploads"
          cd "$APP_DIR"
          
          # 既存のコンテナとイメージを停止・削除
          echo "Stopping existing containers..."
          docker-compose down || echo "No containers to stop"
          
          # 古いDockerイメージを削除
          echo "Removing old Docker images..."
          docker rmi -f $(docker images -q sketchshifter_backend-api 2>/dev/null) || echo "No old images to remove"
          
          # Dockerのビルドキャッシュもクリア
          echo "Cleaning Docker build cache..."
          docker system prune -a -f || echo "Cache already clean"
          
          # アプリケーションファイルのダウンロード
          echo "Downloading application files from S3..."
          aws s3 cp "s3://$S3_BUCKET/deploy/app" app || { echo "Failed to download app"; exit 1; }
          aws s3 cp "s3://$S3_BUCKET/deploy/docker-compose.yml" docker-compose.yml || { echo "Failed to download docker-compose.yml"; exit 1; }
          aws s3 cp "s3://$S3_BUCKET/deploy/Dockerfile" Dockerfile || { echo "Failed to download Dockerfile"; exit 1; }
          aws s3 cp "s3://$S3_BUCKET/deploy/.env" .env || { echo "Failed to download .env"; exit 1; }
          
          # 実行権限の設定
          echo "Setting permissions..."
          chmod +x app
          
          # ディレクトリ権限の確認
          echo "Current permissions:"
          ls -la
          
          # Dockerの状態確認
          echo "Checking Docker status..."
          docker info || { echo "Docker not running or not accessible"; exit 1; }
          
          # キャッシュなしで新コンテナをビルド・起動
          echo "Building and starting new containers (without cache)..."
          docker-compose build --no-cache || { echo "Failed to build containers"; exit 1; }
          docker-compose up -d || { echo "Failed to start containers"; exit 1; }
          
          # 起動確認
          echo "Waiting for containers to start..."
          sleep 10
          
          echo "Container status:"
          docker ps
          
          echo "Container logs:"
          docker logs processing-api --tail 20 || echo "No logs available"
          
          echo "==== Deployment completed successfully! ===="
          EOF
          
          # デプロイスクリプトをS3にアップロード
          chmod +x deploy.sh
          aws s3 cp deploy.sh s3://${{ secrets.S3_BUCKET_NAME }}/deploy/deploy.sh
          
          echo "Sending deployment command to EC2 via SSM..."
          # 単一のSSMコマンドでデプロイを実行
          COMMAND_OUTPUT=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --parameters commands="cd /tmp && aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/deploy/deploy.sh . && chmod +x deploy.sh && ./deploy.sh ${{ secrets.APP_DIRECTORY }} ${{ secrets.S3_BUCKET_NAME }}" \
            --output json)
          
          echo "SSM Command submitted"
          COMMAND_ID=$(echo $COMMAND_OUTPUT | jq -r '.Command.CommandId')
          echo "Command ID: $COMMAND_ID"
          
          # 結果を待機
          echo "Waiting for command execution to complete..."
          sleep 30
          
          # コマンド実行結果の確認
          echo "Checking command execution status..."
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --output json || echo "Command execution details not available yet"
          
          echo "Deployment process initiated. Check AWS SSM console for full details."