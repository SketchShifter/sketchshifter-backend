name: Build and Deploy to EC2

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'README.md'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.18'
          cache: true
        
      - name: Install dependencies
        run: |
          go mod download
          go mod tidy
      
      - name: Build application
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o app ./cmd/app/main.go
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy to EC2 via SSM
        run: |
          # 現在の日時を取得（ユニークなデプロイIDとして使用）
          DEPLOY_ID=$(date +%Y%m%d%H%M%S)
          echo "Starting deployment $DEPLOY_ID"
          
          # S3にアプリケーションファイルをアップロード
          echo "Uploading application files to S3..."
          aws s3 cp app s3://${{ secrets.S3_BUCKET_NAME }}/deploy/app-$DEPLOY_ID
          aws s3 cp docker-compose.yml s3://${{ secrets.S3_BUCKET_NAME }}/deploy/docker-compose.yml-$DEPLOY_ID
          aws s3 cp Dockerfile s3://${{ secrets.S3_BUCKET_NAME }}/deploy/Dockerfile-$DEPLOY_ID
          
          # 環境変数ファイルを作成してS3にアップロード
          echo "${{ secrets.ENV_FILE }}" > env_file.txt
          aws s3 cp env_file.txt s3://${{ secrets.S3_BUCKET_NAME }}/deploy/.env-$DEPLOY_ID
          
          # メインデプロイスクリプトを作成
          echo "Creating main deployment script..."
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # 引数からデプロイIDを取得
          DEPLOY_ID=$1
          APP_DIR=$2
          S3_BUCKET=$3
          
          echo "==== Starting deployment process $DEPLOY_ID ===="
          echo "Deploying to directory: $APP_DIR"
          echo "Using S3 bucket: $S3_BUCKET"
          
          # アプリケーションディレクトリの作成
          mkdir -p $APP_DIR/uploads
          chmod 755 $APP_DIR/uploads
          cd $APP_DIR
          
          echo "Downloading files from S3..."
          # S3からファイルをダウンロード
          aws s3 cp s3://$S3_BUCKET/deploy/app-$DEPLOY_ID app
          aws s3 cp s3://$S3_BUCKET/deploy/docker-compose.yml-$DEPLOY_ID docker-compose.yml
          aws s3 cp s3://$S3_BUCKET/deploy/Dockerfile-$DEPLOY_ID Dockerfile
          aws s3 cp s3://$S3_BUCKET/deploy/.env-$DEPLOY_ID .env
          
          # 実行権限を設定
          chmod +x app
          
          echo "Stopping existing containers..."
          # Dockerコンテナの再起動
          docker-compose down || true
          
          echo "Building and starting new containers..."
          docker-compose up -d
          
          # デプロイ確認
          echo "Waiting for container to start..."
          sleep 10
          
          echo "Container status:"
          docker ps | grep processing-api || echo "Container not found!"
          
          echo "Container logs (last 10 lines):"
          docker logs processing-api --tail 10 || echo "Failed to get logs"
          
          echo "Cleaning up temporary files from S3..."
          aws s3 rm s3://$S3_BUCKET/deploy/app-$DEPLOY_ID
          aws s3 rm s3://$S3_BUCKET/deploy/docker-compose.yml-$DEPLOY_ID
          aws s3 rm s3://$S3_BUCKET/deploy/Dockerfile-$DEPLOY_ID
          aws s3 rm s3://$S3_BUCKET/deploy/.env-$DEPLOY_ID
          
          echo "==== Deployment completed successfully! ===="
          EOF
          
          # S3にメインデプロイスクリプトをアップロード
          chmod +x deploy.sh
          aws s3 cp deploy.sh s3://${{ secrets.S3_BUCKET_NAME }}/deploy/deploy-$DEPLOY_ID.sh
          
          # EC2実行用のコマンドスクリプトを作成
          echo "Creating EC2 command script..."
          cat > ec2_commands.sh << EOF
          #!/bin/bash
          cd /tmp
          aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/deploy/deploy-$DEPLOY_ID.sh .
          chmod +x deploy-$DEPLOY_ID.sh
          ./deploy-$DEPLOY_ID.sh $DEPLOY_ID ${{ secrets.APP_DIRECTORY }} ${{ secrets.S3_BUCKET_NAME }}
          rm deploy-$DEPLOY_ID.sh
          EOF
          
          # S3にEC2コマンドスクリプトをアップロード
          chmod +x ec2_commands.sh
          aws s3 cp ec2_commands.sh s3://${{ secrets.S3_BUCKET_NAME }}/deploy/ec2_commands-$DEPLOY_ID.sh
          
          echo "Sending command to EC2 via SSM..."
          # SSMでシンプルにS3からスクリプトを実行するコマンドを送信
          aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters commands="aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/deploy/ec2_commands-$DEPLOY_ID.sh /tmp/ && chmod +x /tmp/ec2_commands-$DEPLOY_ID.sh && /tmp/ec2_commands-$DEPLOY_ID.sh && rm /tmp/ec2_commands-$DEPLOY_ID.sh" \
            --output text
          
          echo "Cleaning up temporary deployment scripts..."
          # 一時ファイルの削除
          aws s3 rm s3://${{ secrets.S3_BUCKET_NAME }}/deploy/deploy-$DEPLOY_ID.sh
          aws s3 rm s3://${{ secrets.S3_BUCKET_NAME }}/deploy/ec2_commands-$DEPLOY_ID.sh
          
          echo "Deployment process initiated on EC2 instance"
          echo "Check the AWS SSM console for command execution details"
          
      - name: Check deployment status
        run: |
          # 30秒待機してEC2でのデプロイ処理が進むようにする
          echo "Waiting 30 seconds for deployment to progress..."
          sleep 30
          
          # コマンド実行のステータスをチェック（オプション）
          echo "Checking latest command execution status..."
          aws ssm list-commands \
            --filters Key=Status,Values=InProgress,Success,Failed \
            --max-items 5 \
            --output table